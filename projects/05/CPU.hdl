// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a = instruction[0..15], b = ALUOutput, sel = instruction[15], out = ARegIn);
    	
    Not(in = instruction[15], out = notOpCode);

    Or(a = instruction[5], b = notOpCode, out = ALoad);
    And(a = instruction[4], b = instruction[15], out = DLoad);
    And(a = instruction[3], b = instruction[15], out = writeM);


    ARegister(in = ARegIn, load = ALoad, out = AOut, out[0..14] = addressM); // TODO
    
    DRegister(in = ALUOutput, load = DLoad , out = DOut);


    Mux16(a = AOut, b = inM, sel = instruction[12], out = ALUSecondInput);
    ALU(x = DOut, y = ALUSecondInput, zx = instruction[11], nx = instruction[10], zy = instruction[9], 
    					ny = instruction[8], f = instruction[7], no = instruction[6], 
    						out = ALUOutput, out = outM, zr = ALUoutZero, ng = ALUoutNeg);

    Xor(a = ALUoutNeg, b = instruction[2], out = xorNeg);
    Xor(a = ALUoutZero, b = instruction[1], out = xorZr);
    
    Or(a = ALUoutZero, b = ALUoutNeg, out = ZrOrNg); // MAY NEED XOR
    Not(in = ZrOrNg, out = Pos);

    Xor(a = Pos, b = instruction[0], out = xorPos);

    Not(in = xorNeg, out = notXorNeg);
    Not(in = xorZr, out = notXorZr);
    Not(in = xorPos, out = notXorPos);

    // And(a = notXorNeg, b = notXorZr, out = negAndZr);
    // And(a = negAndZr, b = notXorPos, out = jmpDir);

    Or(a = instruction[2], b = instruction[1], out = and);
    Or(a=and, b=instruction[0], out=notNullJump);
    Not(in=notNullJump, out=nullJump);
    Or(a = notXorNeg, b = notXorZr, out = lessOrEqual);
    Or(a = notXorZr, b = notXorPos, out = greaterOrEqual);
    And(a = lessOrEqual, b = greaterOrEqual, out = jmpDir);
    And(a = jmpDir, b = instruction[15], out = jmpDir2);
    And(a = jmpDir2, b = notNullJump, out = jmp);
    Not(in = jmp, out = inc);

    // Or(a = instruction[0], b = instruction[1], out = or);
    // Or(a = or, b = instruction[2], out = notInc);
    // Not(in = notInc, out = inc);

    PC(in = AOut, load = jmp, inc = inc, reset = reset, out[0..14] = pc);
}